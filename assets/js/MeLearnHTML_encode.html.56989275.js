"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[256],{6262:(e,i)=>{i.A=(e,i)=>{const s=e.__vccOpts||e;for(const[e,a]of i)s[e]=a;return s}},9279:(e,i,s)=>{s.r(i),s.d(i,{comp:()=>d,data:()=>l});var a=s(641);const t={},d=(0,s(6262).A)(t,[["render",function(e,i){return(0,a.uX)(),(0,a.CE)("div",null,i[0]||(i[0]=[(0,a.Fv)('<h1 id="html-字符编码" tabindex="-1"><a class="header-anchor" href="#html-字符编码"><span>HTML 字符编码</span></a></h1><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>网页包含了大量的文字，浏览器必须知道这些文字的编码方法，才能把文字还原出来。</p><p>一般情况下，服务器向浏览器发送 HTML 网页文件时，会通过 HTTP 头信息，声明网页的编码方式。</p><div class="language-http line-numbers-mode" data-highlighter="shiki" data-ext="http" data-title="http" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Content-Type</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> text/html; charset=UTF-8</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>上面代码中，HTTP 头信息的<code>Content-Type</code>字段先声明，服务器发送的数据类型是<code>text/html</code>（即 HTML 网页），然后声明网页的文字编码是<code>UTF-8</code>。</p><p>网页内部也会再用<code>&lt;meta&gt;</code>标签，再次声明网页的编码。</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">meta</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> charset</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;UTF-8&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="字符的数字表示法" tabindex="-1"><a class="header-anchor" href="#字符的数字表示法"><span>字符的数字表示法</span></a></h2><p>网页可以使用不同语言的编码方式，但是最常用的编码是 UTF-8。UTF-8 编码是 Unicode 字符集的一种表达方式。这个字符集的设计目标是包含世界上的所有字符，目前已经收入了十多万个字符。</p><p>每个字符有一个 Unicode 号码，称为码点（code point）。如果知道码点，就能查到这是什么字符。举例来说，英文字母<code>a</code>的码点是十进制的<code>97</code>（十六进制的<code>61</code>），汉字“中”的码点是十进制的<code>20013</code>（十六进制的<code>4e2d</code>）。</p><p>由于下面的原因，不是每一个 Unicode 字符都能直接在 HTML 语言里面显示。</p><p>（1）不是每个 Unicode 字符都可以打印出来，有些没有可打印形式，比如换行符的码点是十进制的<code>10</code>（十六进制的<code>A</code>），就没有对应的字面形式。</p><p>（2）小于号（<code>&lt;</code>）和大于号（<code>&gt;</code>）用来定义 HTML 标签，其他需要用到这两个符号的场合，必须防止它们被解释成标签。</p><p>（3）由于 Unicode 字符太多，无法找到一种输入法，可以直接输入所有这些字符。换言之，没有一种键盘，有办法输入所有符号。</p><p>（4）网页不允许混合使用多种编码，如果使用 UTF-8 编码的同时，又想插入其他编码的字符，就会很困难。</p><p>HTML 为了解决上面这些问题，允许使用 Unicode 码点表示字符，浏览器会自动将码点转成对应的字符。</p><p>字符的码点表示法是<code>&amp;#N;</code>（十进制，<code>N</code>代表码点）或者<code>&amp;#xN;</code>（十六进制，<code>N</code>代表码点），比如，字符<code>a</code>可以写成<code>&amp;#97;</code>（十进制）或者<code>&amp;#x61;</code>（十六进制），字符<code>中</code>可以写成<code>&amp;#20013;</code>（十进制）或者<code>&amp;#x4e2d;</code>（十六进制），浏览器会自动转换它们。</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;hello&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">&lt;!-- 等同于 --&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">&amp;#104;&amp;#101;&amp;#108;&amp;#108;&amp;#111;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">&lt;!-- 等同于 --&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">&amp;#x68;&amp;#x65;&amp;#x6c;&amp;#x6c;&amp;#x6f;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，字符可以直接表示，也可以使用十进制码点或十六进制码点表示。</p><p>注意，HTML 标签本身不能使用码点表示，否则浏览器会认为这是所要显示的文本内容，而不是标签。比如，<code>&lt;p&gt;</code>一旦写成<code>&lt;&amp;#112;&gt;</code>或者<code>&amp;#60;&amp;#112;&amp;#62;</code>，浏览器就不再认为这是标签了，而会当作文本内容将其显示为<code>&lt;p&gt;</code>。</p><h2 id="字符的实体表示法" tabindex="-1"><a class="header-anchor" href="#字符的实体表示法"><span>字符的实体表示法</span></a></h2><p>数字表示法的不方便之处，在于必须知道每个字符的码点，很难记忆。为了能够快速输入，HTML 为一些特殊字符，规定了容易记忆的名字，允许通过名字来表示它们，这称为实体表示法（entity）。</p><p>实体的写法是<code>&amp;name;</code>，其中的<code>name</code>是字符的名字。下面是其中一些特殊字符，及其对应的实体。</p><ul><li><code>&lt;</code>：<code>&amp;lt;</code></li><li><code>&gt;</code>：<code>&amp;gt;</code></li><li><code>&quot;</code>：<code>&amp;quot;</code></li><li><code>&#39;</code>：<code>&amp;apos;</code></li><li><code>&amp;</code>：<code>&amp;amp;</code></li><li><code>©</code>：<code>&amp;copy;</code></li><li><code>#</code>：<code>&amp;num;</code></li><li><code>§</code>：<code>&amp;sect;</code></li><li><code>¥</code>：<code>&amp;yen;</code></li><li><code>$</code>：<code>&amp;dollar;</code></li><li><code>£</code>：<code>&amp;pound;</code></li><li><code>¢</code>：<code>&amp;cent;</code></li><li><code>%</code>：<code>&amp;percnt;</code></li><li><code>*</code>：<code>$ast;</code></li><li><code>@</code>：<code>&amp;commat;</code></li><li><code>^</code>：<code>&amp;Hat;</code></li><li><code>±</code>：<code>&amp;plusmn;</code></li><li>空格：<code>&amp;nbsp;</code></li></ul><p>注意，上面最后一个特殊字符是空格，它也有对应的实体表示法。</p><p>字符的数字表示法和实体表示法，都可以表示正常情况无法输入的字符，逃脱了浏览器的限制，所以英语里面称为“escape”，中文翻译为“字符的转义”。</p>',27)]))}]]),l=JSON.parse('{"path":"/MeLearnHTML/encode.html","title":"HTML 字符编码","lang":"zh-CN","frontmatter":{"description":"HTML 字符编码 简介 网页包含了大量的文字，浏览器必须知道这些文字的编码方法，才能把文字还原出来。 一般情况下，服务器向浏览器发送 HTML 网页文件时，会通过 HTTP 头信息，声明网页的编码方式。 上面代码中，HTTP 头信息的Content-Type字段先声明，服务器发送的数据类型是text/html（即 HTML 网页），然后声明网页的文字...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/cty-docs/MeLearnHTML/encode.html"}],["meta",{"property":"og:site_name","content":"文档演示"}],["meta",{"property":"og:title","content":"HTML 字符编码"}],["meta",{"property":"og:description","content":"HTML 字符编码 简介 网页包含了大量的文字，浏览器必须知道这些文字的编码方法，才能把文字还原出来。 一般情况下，服务器向浏览器发送 HTML 网页文件时，会通过 HTTP 头信息，声明网页的编码方式。 上面代码中，HTTP 头信息的Content-Type字段先声明，服务器发送的数据类型是text/html（即 HTML 网页），然后声明网页的文字..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-14T12:36:11.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-14T12:36:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"HTML 字符编码\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-14T12:36:11.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"字符的数字表示法","slug":"字符的数字表示法","link":"#字符的数字表示法","children":[]},{"level":2,"title":"字符的实体表示法","slug":"字符的实体表示法","link":"#字符的实体表示法","children":[]}],"git":{"createdTime":1739536571000,"updatedTime":1739536571000,"contributors":[{"name":"Cui Tianyi","username":"Cui Tianyi","email":"cty88003200@outlook.com","commits":1,"url":"https://github.com/Cui Tianyi"}]},"readingTime":{"minutes":3.33,"words":998},"filePathRelative":"MeLearnHTML/encode.md","localizedDate":"2025年2月14日","autoDesc":true}')}}]);